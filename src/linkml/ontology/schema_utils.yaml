id: https://concepts.datalad.org/ontology/schema_utils
name: meta_utils
title: Utilities for identifying and typing metadata objects
description: >-
  The provided slots and mixins help to equip metadata objects with
  standard properties for type inference and identification.
prefixes:
  dcterms: http://purl.org/dc/terms/
  dlco: https://concepts.datalad.org/ontology/
  linkml: https://w3id.org/linkml/
  RDFS: http://www.w3.org/2000/01/rdf-schema#
imports:
  - ../ontology/rdfs
  - ../ontology/types
default_prefix: dlco


slots:
  meta_code:
    identifier: true
    range: Code
    description: >-
      Context-constraint unique identifier of a metadata object.
      In contrast to `meta_id`, this identifier is not globally
      unique, but its uniqueness guarantees are limited to a single
      metadata document. This is analog to a relative IRI `@id`
      specification in JSON-LD that needs to be expanded with
      an appropriate (document) `@base` URI to become globally
      unique.
    exact_mappings:
      - dcterms:identifier
      - schema:identifier
    see_also:
      - https://concepts.datalad.org/ontology/meta_id/
  meta_id:
    identifier: true
    description: >-
      Globally unique identifier of a metadata object.
    range: uriorcurie
    exact_mappings:
      - dcterms:identifier
      - schema:identifier
    see_also:
      - https://concepts.datalad.org/ontology/meta_code/
  meta_type:
    designates_type: true
    description: >-
      Type designator of a metadata object.
    range: uriorcurie
    exact_mappings:
      - dcterms:type


classes:
  HasMetaTypeDesignator:
    mixin: true
    description: >-
      (Mixin) class for an object with a metadata type designator.
    slots:
      - meta_type

  HasRequiredMetaTypeDesignator:
    mixin: true
    is_a: HasMetaTypeDesignator
    description: >-
      (Mixin) class for an object with a required metadata type designator.
    slot_usage:
      meta_type:
        required: true

  MetadataObject:
    class_uri: dlco:MetadataObject
    description: >-
      Base class for schema elements. These are classes that add
      structure-defining properties to classes that implement
      ontology concepts. In other words, they define the concrete
      structure of a particular metadata document, include (and in
      particular) the linkage between different metadata records
      (e.g., reference by identifier vs. inlined).
    comments:
      - Derived classes should carry a name suffix `Object` or `Obj` to allow for intuitive naming while avoiding name conflicts with ontology concept classes
      - Individual schemas may want to define a subclass `Object` that, e.g., add a type designator slot. The may also want to define an `Objects` subclass to serve as a generic Container (maybe as a `tree_root`).
