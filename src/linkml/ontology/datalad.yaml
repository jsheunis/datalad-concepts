# models for DataLad datasets

id: https://concepts.datalad.org/ontology/datalad
name: datalad
title: DataLad concepts
description: >
  TODO
prefixes:
  dlco: https://concepts.datalad.org/ontology/
  dcterms: http://purl.org/dc/terms/
  RDFS: http://www.w3.org/2000/01/rdf-schema#
imports:
  - ../ontology/datasets
  - ../ontology/git
  - ../ontology/common


classes:
  DataladDatasetVersion:
    class_uri: dlco:DataladDatasetVersion
    mixin: true
    is_a: Dataset
    mixins:
      - Commit
    description: >-
      A version (i.e., commit) of a Datalad dataset.
    slots:
      - has_annex_remote
    slot_usage:
      distribution:
        range: FileContainer
        equals_expression: "{tree}"
    todos:
      - This class has the `has_annex_remote` slot primarily for historical
        reasons. It makes sense to have it, but it is a conceptual conflict.
        An annex remote is not registered for a specific dataset version,
        but for a whole repository (in the git-annex branch). This makes it
        version-less (and could even span multiple datasets (hosted in
        different branches). Moreover, there is no concept of different
        special remote configurations per version. It makes sense to migrate
        this information to a different place. A candidate would be
        `DataladDataset`. However, strictly speaking this is not a requirement
        and special remotes are valid outside the realm of a datalad dataset.
        It may be needed to model something like a git-annex repository.

  DataladDataset:
    class_uri: dlco:DataladDataset
    mixin: true
    description: >-
      Concept class for linking `DataladDatasetVersion` instances.
    slots:
      - uuid
    slot_usage:
      uuid:
        description: >-
          UUID-style unique identifier. This property is the main
          distinguishing feature between a DataLad dataset and
          a plain Git or git-annex repository branch.
        required: true
    close_mappings:
      - dlco:Dataset
